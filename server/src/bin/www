#!/usr/bin/env node

const http = require('http');
const app = require('../app');
const initSocket = require('../socket');


const PORT = 3001;
const server = http.Server(app);

initSocket(server).listen(PORT)

server.on('error', onError);
server.on('listening', onListening);
server.on('uncaughtException', onUncaughtException);

// Event listener for HTTP server "error" event.
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof PORT === 'string'
    ? 'Pipe ' + PORT
    : 'Port ' + PORT;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Event listener for HTTP server "listening" event.
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log(`Listening on ${bind}`);
}

// Event listener for "uncaught exception" event.
function onUncaughtException(err) {
  const parsedStack = errorStackParser(err);
  console.log(`UNCAUGHT EXCEPTION: ${err.message || "Unkown"}`);
  process.exit(1);
};